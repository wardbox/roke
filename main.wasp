app roke {
  wasp: {
    version: "^0.16.4"
  },
  title: "Roke: A Full-Stack Wasp Starter with Modern UI Components",
  head: [
    "<meta name='description' content='A comprehensive Wasp starter template featuring shadcn/ui components, Motion animations, and TypeScript support for building modern full-stack web applications.'>",
    
    "<meta property='og:url' content='https://example.com'>",
    "<meta property='og:type' content='website'>",
    "<meta property='og:title' content='Roke: A Full-Stack Wasp Starter with Modern UI Components'>",
    "<meta property='og:description' content='A comprehensive Wasp starter template featuring shadcn/ui components, Motion animations, and TypeScript support for building modern full-stack web applications.'>",
    "<meta property='og:image' content='https://example.com/example.png'>",
    
    "<meta name='twitter:card' content='summary_large_image'>",
    "<meta property='twitter:domain' content='example.com'>",
    "<meta property='twitter:url' content='https://example.com'>",
    "<meta name='twitter:title' content='Roke: A Full-Stack Wasp Starter with Modern UI Components'>",
    "<meta name='twitter:description' content='A comprehensive Wasp starter template featuring shadcn/ui components, Motion animations, and TypeScript support for building modern full-stack web applications.'>",
    "<meta name='twitter:image' content='https://example.com/example.png'>"
  ],
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "example.com",
          email: "wizard@example.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/user-signup-fields",
      }
    },
    onAuthSucceededRedirectTo: "/",
    onAuthFailedRedirectTo: "/login"
  },
  client: {
    rootComponent: import Root from "@src/RootPage",
    setupFn: import setupClient from "@src/lib/setup"
  },
  emailSender: {
    provider: Dummy,
  }
}

//#region Routes
route Landing { path: "/", to: Landing }
route Profile { path: "/profile", to: ProfilePage }
route SubscriptionRoute { path: "/subscription", to: SubscriptionPage }
route CheckoutResultRoute { path: "/checkout", to: CheckoutResultPage }
route LoginRoute { path: "/login", to: LoginPage }
route SignupRoute { path: "/signup", to: SignupPage }
route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
route NotFoundRoute { path: "*", to: NotFoundPage }
//#endregion

//#region Pages
page Landing {
  component: import Landing from "@src/landing/LandingPage",
}

page ProfilePage {
  component: import Profile from "@src/ProfilePage",
  authRequired: true,
}

page LoginPage {
  component: import { Login } from "@src/auth/auth",
}

page SignupPage {
  component: import { Signup } from "@src/auth/auth",
}

page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/auth/auth",
}

page PasswordResetPage {
  component: import { PasswordReset } from "@src/auth/auth",
}

page EmailVerificationPage {
  component: import { EmailVerification } from "@src/auth/auth",
}

page SubscriptionPage {
  component: import SubscriptionPage from "@src/payment/SubscriptionPage",
  authRequired: true
}

page CheckoutResultPage {
  component: import CheckoutResult from "@src/payment/CheckoutResultPage"
}

page NotFoundPage {
  component: import NotFound from "@src/404Page"
}
//#endregion

//#region Stripe Actions
action createCheckoutSession {
  fn: import { createCheckoutSession } from "@src/payment/stripe/operations",
  entities: [User]
}

action createCustomerPortalSession {
  fn: import { createCustomerPortalSession } from "@src/payment/stripe/operations",
  entities: [User]
}
//#endregion

//#region Stripe API
api stripeWebhook {
  fn: import { handleStripeWebhook } from "@src/payment/stripe/webhooks.ts",
  middlewareConfigFn: import { stripeWebhookMiddlewareConfigFn } from "@src/payment/stripe/webhooks",
  httpRoute: (POST, "/stripe-webhooks"),
  entities: [User]
}
//#endregion
